le.regex <- paste0(le.abbr.regex, le.full.regex, collapse = "|")
le.regex
#' @param le.table A table with legal entities, if NULL the default table will be used
#' @param standardized Is the input already standardized? If not the standardization function
#' stand_chars is used to standardize the input string
#' @param nthreads
#' Number of threads for paralell processing (as integer) \cr
#' nthreads = 1: No parallel processing (default) \cr
#' nthreads = 0: All but one cores will be used (parallel::detectCores() - 1)
#'
#' @return A dataframe with standardized legal entities
#' @export
stand_le_2 <- function(string, le.table = NULL, standardized = FALSE, nthreads = 1) {
`%>%` <- magrittr::`%>%`
# prepare the legal entity table
if (is.null(le.table)) le.table <- tpfuns::legal_entities
le.table <- le.table %>%
dplyr::mutate(le_abbr = tpfuns::stand_chars(le_abbr)) %>%
dplyr::mutate(le_full = tpfuns::stand_chars(le_full)) %>%
dplyr::mutate(abbr_ngram = stringi::stri_count_fixed(le_abbr, " ") + 1) %>%
dplyr::mutate(full_ngram = stringi::stri_count_fixed(le_full, " ") + 1) %>%
dplyr::mutate(le_abbr = stringi::stri_replace_all_fixed(le_abbr, " ", "\\s")) %>%
dplyr::mutate(le_full = stringi::stri_replace_all_fixed(le_full, " ", "\\s")) %>%
dplyr::mutate(le_abbr = stringi::stri_replace_all_fixed(le_abbr, "(", "\\(")) %>%
dplyr::mutate(le_abbr = stringi::stri_replace_all_fixed(le_abbr, ")", "\\)")) %>%
dplyr::mutate(le_full = stringi::stri_replace_all_fixed(le_full, "(", "\\(")) %>%
dplyr::mutate(le_full = stringi::stri_replace_all_fixed(le_full, ")", "\\)")) %>%
dplyr::mutate(le_abbr = paste0("\\b", le_abbr, "$")) %>%
dplyr::mutate(le_full = paste0("\\b", le_full, "$")) %>%
dplyr::distinct(., .keep_all = TRUE)
le.abbr <- le.table %>%
dplyr::select(le_abbr, abbr_ngram) %>%
dplyr::arrange(desc(abbr_ngram)) %>%
dplyr::distinct(le_abbr)
le.abbr.regex <- stringi::stri_flatten(le.abbr$le_abbr, "|")
le.full <- le.table %>%
dplyr::select(le_full, full_ngram) %>%
dplyr::arrange(desc(full_ngram)) %>%
dplyr::distinct(le_full)
le.full.regex <- stringi::stri_flatten(le.full$le_full, "|")
le.regex <- paste0(le.abbr.regex, le.full.regex, collapse = "|")
if (nthreads == 1) {
if (standardized == FALSE) string <- tpfuns::stand_chars(string, nthreads = nthreads)
string <- stringi::stri_replace_all_regex(string, le.regex, "")
string <- stringi::stri_replace_all_regex(string, "\\s+", " ")
string <- stringi::stri_trim_both(string)
} else {
if (nthreads == 0) nthreads <- parallel::detectCores() - 1
if (standardized == FALSE) string <- tpfuns::stand_chars(string, nthreads = nthreads)
split <- split(string, sort(1:length(string)%%nthreads))
cl <- parallel::makeCluster(3)
doSNOW::registerDoSNOW(cl)
pb <- txtProgressBar(max = length(length(split)), style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
`%dopar%` <- foreach::`%dopar%`
string <- foreach::foreach(
i = 1:length(split),
.packages = ("stringi"),
.options.snow = opts,
.combine = c
) %dopar% {
spli[[i]] <- stringi::stri_replace_all_regex(spli[[i]], le.regex, "")
spli[[i]] <- stringi::stri_replace_all_regex(spli[[i]], "\\s+", " ")
spli[[i]] <- stringi::stri_trim_both(spli[[i]])
}
parallel::stopCluster(cl)
}
return(string)
}
stand_le_2(a)
a <- "BASF SE"
stand_le_2(a)
a <- "BASF SE"
stand_le_2(string = a, nthreads = 0)
#' @param le.table A table with legal entities, if NULL the default table will be used
#' @param standardized Is the input already standardized? If not the standardization function
#' stand_chars is used to standardize the input string
#' @param nthreads
#' Number of threads for paralell processing (as integer) \cr
#' nthreads = 1: No parallel processing (default) \cr
#' nthreads = 0: All but one cores will be used (parallel::detectCores() - 1)
#'
#' @return A dataframe with standardized legal entities
#' @export
stand_le_2 <- function(string, le.table = NULL, standardized = FALSE, nthreads = 1) {
`%>%` <- magrittr::`%>%`
# prepare the legal entity table
if (is.null(le.table)) le.table <- tpfuns::legal_entities
le.table <- le.table %>%
dplyr::mutate(le_abbr = tpfuns::stand_chars(le_abbr)) %>%
dplyr::mutate(le_full = tpfuns::stand_chars(le_full)) %>%
dplyr::mutate(abbr_ngram = stringi::stri_count_fixed(le_abbr, " ") + 1) %>%
dplyr::mutate(full_ngram = stringi::stri_count_fixed(le_full, " ") + 1) %>%
dplyr::mutate(le_abbr = stringi::stri_replace_all_fixed(le_abbr, " ", "\\s")) %>%
dplyr::mutate(le_full = stringi::stri_replace_all_fixed(le_full, " ", "\\s")) %>%
dplyr::mutate(le_abbr = stringi::stri_replace_all_fixed(le_abbr, "(", "\\(")) %>%
dplyr::mutate(le_abbr = stringi::stri_replace_all_fixed(le_abbr, ")", "\\)")) %>%
dplyr::mutate(le_full = stringi::stri_replace_all_fixed(le_full, "(", "\\(")) %>%
dplyr::mutate(le_full = stringi::stri_replace_all_fixed(le_full, ")", "\\)")) %>%
dplyr::mutate(le_abbr = paste0("\\b", le_abbr, "$")) %>%
dplyr::mutate(le_full = paste0("\\b", le_full, "$")) %>%
dplyr::distinct(., .keep_all = TRUE)
le.abbr <- le.table %>%
dplyr::select(le_abbr, abbr_ngram) %>%
dplyr::arrange(desc(abbr_ngram)) %>%
dplyr::distinct(le_abbr)
le.abbr.regex <- stringi::stri_flatten(le.abbr$le_abbr, "|")
le.full <- le.table %>%
dplyr::select(le_full, full_ngram) %>%
dplyr::arrange(desc(full_ngram)) %>%
dplyr::distinct(le_full)
le.full.regex <- stringi::stri_flatten(le.full$le_full, "|")
le.regex <- paste0(le.abbr.regex, le.full.regex, collapse = "|")
if (nthreads == 1) {
if (standardized == FALSE) string <- tpfuns::stand_chars(string, nthreads = nthreads)
string <- stringi::stri_replace_all_regex(string, le.regex, "")
string <- stringi::stri_replace_all_regex(string, "\\s+", " ")
string <- stringi::stri_trim_both(string)
} else {
if (nthreads == 0) nthreads <- parallel::detectCores() - 1
if (standardized == FALSE) string <- tpfuns::stand_chars(string, nthreads = nthreads)
split <- split(string, sort(1:length(string)%%nthreads))
cl <- parallel::makeCluster(3)
doSNOW::registerDoSNOW(cl)
pb <- txtProgressBar(max = length(length(split)), style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
`%dopar%` <- foreach::`%dopar%`
string <- foreach::foreach(
i = 1:length(split),
.packages = ("stringi"),
.options.snow = opts,
.combine = c
) %dopar% {
split[[i]] <- stringi::stri_replace_all_regex(split[[i]], le.regex, "")
split[[i]] <- stringi::stri_replace_all_regex(split[[i]], "\\s+", " ")
split[[i]] <- stringi::stri_trim_both(split[[i]])
}
parallel::stopCluster(cl)
}
return(string)
}
a <- "BASF SE"
stand_le_2(string = a, nthreads = 0)
a <- rep("BASF SE", 5)
stand_le_2(string = a, nthreads = 0)
a <- c("BASF SE", "BASF AG")
stand_le_2(a)
le.table <- tpfuns::legal_entities
#' Number of threads for paralell processing (as integer) \cr
#' nthreads = 1: No parallel processing (default) \cr
#' nthreads = 0: All but one cores will be used (parallel::detectCores() - 1)
#'
#' @return A dataframe with standardized legal entities
#' @export
#' @examples
#' a <- c("BASF SE", "BASF AG")
#'stand_le_2(a)
#'
stand_le_2 <- function(string, le.table = NULL, standardized = FALSE, nthreads = 1) {
`%>%` <- magrittr::`%>%`
# prepare the legal entity table
if (is.null(le.table)) le.table <- tpfuns::legal_entities
le.table <- le.table %>%
dplyr::mutate(le_abbr = tpfuns::stand_chars(le_abbr)) %>%
dplyr::mutate(le_full = tpfuns::stand_chars(le_full)) %>%
dplyr::mutate(abbr_ngram = stringi::stri_count_fixed(le_abbr, " ") + 1) %>%
dplyr::mutate(full_ngram = stringi::stri_count_fixed(le_full, " ") + 1) %>%
dplyr::mutate(le_abbr = stringi::stri_replace_all_fixed(le_abbr, " ", "\\s")) %>%
dplyr::mutate(le_abbr = stringi::stri_replace_all_regex(le_abbr, "([a-z])", "$1\\\\s?")) %>%
dplyr::mutate(le_abbr = stringi::stri_replace_last_fixed(le_abbr, "\\s?", "")) %>%
dplyr::mutate(le_full = stringi::stri_replace_all_fixed(le_full, " ", "\\s")) %>%
dplyr::mutate(le_abbr = stringi::stri_replace_all_fixed(le_abbr, "(", "\\(")) %>%
dplyr::mutate(le_abbr = stringi::stri_replace_all_fixed(le_abbr, ")", "\\)")) %>%
dplyr::mutate(le_full = stringi::stri_replace_all_fixed(le_full, "(", "\\(")) %>%
dplyr::mutate(le_full = stringi::stri_replace_all_fixed(le_full, ")", "\\)")) %>%
dplyr::mutate(le_abbr = paste0("\\b", le_abbr, "$")) %>%
dplyr::mutate(le_full = paste0("\\b", le_full, "$")) %>%
dplyr::distinct(., .keep_all = TRUE)
le.abbr <- le.table %>%
dplyr::select(le_abbr, abbr_ngram) %>%
dplyr::arrange(desc(abbr_ngram)) %>%
dplyr::distinct(le_abbr)
le.abbr.regex <- stringi::stri_flatten(le.abbr$le_abbr, "|")
le.full <- le.table %>%
dplyr::select(le_full, full_ngram) %>%
dplyr::arrange(desc(full_ngram)) %>%
dplyr::distinct(le_full)
le.full.regex <- stringi::stri_flatten(le.full$le_full, "|")
le.regex <- paste0(le.abbr.regex, le.full.regex, collapse = "|")
if (nthreads == 1) {
if (standardized == FALSE) string <- tpfuns::stand_chars(string, nthreads = nthreads)
string <- stringi::stri_replace_all_regex(string, le.regex, "")
string <- stringi::stri_replace_all_regex(string, "\\s+", " ")
string <- stringi::stri_trim_both(string)
} else {
if (nthreads == 0) nthreads <- parallel::detectCores() - 1
if (standardized == FALSE) string <- tpfuns::stand_chars(string, nthreads = nthreads)
split <- split(string, sort(1:length(string)%%nthreads))
cl <- parallel::makeCluster(3)
doSNOW::registerDoSNOW(cl)
pb <- txtProgressBar(max = length(length(split)), style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
`%dopar%` <- foreach::`%dopar%`
string <- foreach::foreach(
i = 1:length(split),
.packages = ("stringi"),
.options.snow = opts,
.combine = c
) %dopar% {
split[[i]] <- stringi::stri_replace_all_regex(split[[i]], le.regex, "")
split[[i]] <- stringi::stri_replace_all_regex(split[[i]], "\\s+", " ")
split[[i]] <- stringi::stri_trim_both(split[[i]])
}
parallel::stopCluster(cl)
}
return(string)
}
a <- rep("BASF SE", 5)
a <- rep("BASF S.E.", 5)
stand_le_2(string = a, nthreads = 0)
a <- rep("BASF S.E.", 5)
stand_le_2(string = a, nthreads = 1)
clean.table <- tpfuns::db_clean
clean.table <- tpfuns::db_clean
regex <- clean.table$regex
regex <- stringi::stri_flatten(clean.table$regex, "|")
regex
#' stand_chars is used to standardize the input string
#' @param nthreads
#' Number of threads for paralell processing (as integer) \cr
#' nthreads = 1: No parallel processing (default) \cr
#' nthreads = 0: All but one cores will be used (parallel::detectCores() - 1)
#'
#' @return A string with standardized names
#' @export
#'a <- "BASF SE - dead 31/12/2005"
#'stand_db_names(a)
stand_db_names <- function(string, regex.table = NULL, standardized = FALSE, nthreads = 1) {
if (is.null(regex.table)) regex.table <- tpfuns::db_clean
regex <- stringi::stri_flatten(regex.table$regex, "|")
if (nthreads == 1) {
if (standardized == FALSE) string <- tpfuns::stand_chars(string, nthreads = nthreads)
string <- stringi::stri_replace_all_regex(string, regex, "")
string <- stringi::stri_replace_all_regex(string, "\\s+", " ")
string <- stringi::stri_trim_both(string)
} else {
if (nthreads == 0) nthreads <- parallel::detectCores() - 1
if (standardized == FALSE) string <- tpfuns::stand_chars(string, nthreads = nthreads)
split <- split(string, sort(1:length(string)%%nthreads))
cl <- parallel::makeCluster(nthreads)
doSNOW::registerDoSNOW(cl)
pb <- txtProgressBar(max = length(length(split)), style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
`%dopar%` <- foreach::`%dopar%`
string <- foreach::foreach(
i = 1:length(split),
.packages = ("stringi"),
.options.snow = opts,
.combine = c
) %dopar% {
split[[i]] <- stringi::stri_replace_all_regex(split[[i]], regex, "")
split[[i]] <- stringi::stri_replace_all_regex(split[[i]], "\\s+", " ")
split[[i]] <- stringi::stri_trim_both(split[[i]])
}
parallel::stopCluster(cl)
}
return(string)
}
#'a <- "BASF SE - dead 31/12/2005"
#'stand_db_names(a)
#' nthreads = 1: No parallel processing (default) \cr
#' nthreads = 0: All but one cores will be used (parallel::detectCores() - 1)
#'
#' @return A string with standardized names
#' @export
#' @examples
#'a <- "BASF SE - dead 31/12/2005"
#'stand_db_names(a)
#'
#'
stand_db_names <- function(string, regex.table = NULL, standardized = FALSE, nthreads = 1) {
if (is.null(regex.table)) regex.table <- tpfuns::db_clean
regex <- stringi::stri_flatten(regex.table$regex, "|")
if (nthreads == 1) {
if (standardized == FALSE) string <- tpfuns::stand_chars(string, nthreads = nthreads)
string <- stringi::stri_replace_all_regex(string, regex, "")
string <- stringi::stri_replace_all_regex(string, "\\s+", " ")
string <- stringi::stri_trim_both(string)
} else {
if (nthreads == 0) nthreads <- parallel::detectCores() - 1
if (standardized == FALSE) string <- tpfuns::stand_chars(string, nthreads = nthreads)
split <- split(string, sort(1:length(string)%%nthreads))
cl <- parallel::makeCluster(nthreads)
doSNOW::registerDoSNOW(cl)
pb <- txtProgressBar(max = length(length(split)), style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
`%dopar%` <- foreach::`%dopar%`
string <- foreach::foreach(
i = 1:length(split),
.packages = ("stringi"),
.options.snow = opts,
.combine = c
) %dopar% {
split[[i]] <- stringi::stri_replace_all_regex(split[[i]], regex, "")
split[[i]] <- stringi::stri_replace_all_regex(split[[i]], "\\s+", " ")
split[[i]] <- stringi::stri_trim_both(split[[i]])
}
parallel::stopCluster(cl)
}
return(string)
}
a <- "BASF SE - dead 31/12/2005"
stand_db_names(a)
source('D:/OneDrive - bwedu/Terminology_Project/R_00_functions/tpfunctions/R/00_read_tables.R', echo=TRUE)
a <- "BASF SE - dead 31/12/2005"
stand_db_names(a)
a <- "BASF SE dead 31/12/2005"
stand_db_names(a)
devtools::load_all(".")
devtools::load_all(".")
#' nthreads = 1: No parallel processing (default) \cr
#' nthreads = 0: All but one cores will be used (parallel::detectCores() - 1)
#'
#' @return A string with standardized names
#' @export
#' @examples
#'a <- "BASF SE dead 31/12/2005"
#'stand_db_names(a)
#'
#'
stand_db_names <- function(string, regex.table = NULL, standardized = FALSE, nthreads = 1) {
if (is.null(regex.table)) regex.table <- tpfuns::db_clean
regex <- stringi::stri_flatten(regex.table$regex, "|")
if (nthreads == 1) {
if (standardized == FALSE) string <- tpfuns::stand_chars(string, nthreads = nthreads)
string <- stringi::stri_replace_all_regex(string, regex, "")
string <- stringi::stri_replace_all_regex(string, "\\s+", " ")
string <- stringi::stri_trim_both(string)
} else {
if (nthreads == 0) nthreads <- parallel::detectCores() - 1
if (standardized == FALSE) string <- tpfuns::stand_chars(string, nthreads = nthreads)
split <- split(string, sort(1:length(string)%%nthreads))
cl <- parallel::makeCluster(nthreads)
doSNOW::registerDoSNOW(cl)
pb <- txtProgressBar(max = length(length(split)), style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
`%dopar%` <- foreach::`%dopar%`
string <- foreach::foreach(
i = 1:length(split),
.packages = ("stringi"),
.options.snow = opts,
.combine = c
) %dopar% {
split[[i]] <- stringi::stri_replace_all_regex(split[[i]], regex, "")
split[[i]] <- stringi::stri_replace_all_regex(split[[i]], "\\s+", " ")
split[[i]] <- stringi::stri_trim_both(split[[i]])
}
parallel::stopCluster(cl)
}
return(string)
}
a <- "BASF SE dead 31/12/2005"
stand_db_names(a)
devtools::load_all(".")
library(tpfuns)
#' nthreads = 1: No parallel processing (default) \cr
#' nthreads = 0: All but one cores will be used (parallel::detectCores() - 1)
#'
#' @return A string with standardized names
#' @export
#' @examples
#'a <- "BASF SE dead 31/12/2005"
#'stand_db_names(a)
#'
#'
stand_db_names <- function(string, regex.table = NULL, standardized = FALSE, nthreads = 1) {
if (is.null(regex.table)) regex.table <- tpfuns::db_clean
regex <- stringi::stri_flatten(regex.table$regex, "|")
if (nthreads == 1) {
if (standardized == FALSE) string <- tpfuns::stand_chars(string, nthreads = nthreads)
string <- stringi::stri_replace_all_regex(string, regex, "")
string <- stringi::stri_replace_all_regex(string, "\\s+", " ")
string <- stringi::stri_trim_both(string)
} else {
if (nthreads == 0) nthreads <- parallel::detectCores() - 1
if (standardized == FALSE) string <- tpfuns::stand_chars(string, nthreads = nthreads)
split <- split(string, sort(1:length(string)%%nthreads))
cl <- parallel::makeCluster(nthreads)
doSNOW::registerDoSNOW(cl)
pb <- txtProgressBar(max = length(length(split)), style = 3)
progress <- function(n) setTxtProgressBar(pb, n)
opts <- list(progress = progress)
`%dopar%` <- foreach::`%dopar%`
string <- foreach::foreach(
i = 1:length(split),
.packages = ("stringi"),
.options.snow = opts,
.combine = c
) %dopar% {
split[[i]] <- stringi::stri_replace_all_regex(split[[i]], regex, "")
split[[i]] <- stringi::stri_replace_all_regex(split[[i]], "\\s+", " ")
split[[i]] <- stringi::stri_trim_both(split[[i]])
}
parallel::stopCluster(cl)
}
return(string)
}
a <- "BASF SE dead 31/12/2005"
stand_db_names(a)
a <- "BASF SE dead 31/12/2005"
stand_db_names(a)
devtools::load_all(".")
library(tpfuns)
devtools::load_all(".")
library(tpfuns)
devtools::load_all(".")
library(tpfuns)
table_stand_ae_be <- readr::read_delim(
"00_tables/ae_be.csv",
";",
col_types = readr::cols(.default = "c"),
na = character()
)
devtools::use_data(word_replace, overwrite = TRUE)
legal_entities <-
readr::read_delim(
"00_tables/legal_entities_utf8_3.csv",
";",
col_types = readr::cols(.default = "c"),
na = character()
)
devtools::use_data(legal_entities, overwrite = TRUE)
db_clean <- readr::read_delim("00_tables/datastream_clean_regex.csv",
";",
col_types = readr::cols(.default = "c"))
devtools::use_data(db_clean, overwrite = TRUE)
stand_table <- readr::read_delim("00_tables/standardization_table.csv", ";")
devtools::use_data(stand_table, overwrite = TRUE)
word_replace <- readr::read_delim(
"00_tables/word_replace.csv",
";",
col_types = readr::cols(.default = "c"),
na = character()
)
devtools::use_data(word_replace, overwrite = TRUE)
table_stand_ae_be <- readr::read_delim(
"00_tables/ae_be.csv",
";",
col_types = readr::cols(.default = "c"),
na = character()
)
devtools::use_data(table_stand_ae_be, overwrite = TRUE)
devtools::load_all(".")
devtools::load_all(".")
library(tpfuns)
ae.be <- tpfuns::table_stand_ae_be
ae.be <- tpfuns::table_stand_ae_be %>%
mutate(UK = lemmatize_strings(tpfuns::stand_chars(stri_enc_toutf8(UK)))) %>%
mutate(US = lemmatize_strings(tpfuns::stand_chars(stri_enc_toutf8(US))))
`%>%` <- magrittr::`%>%`
ae.be <- tpfuns::table_stand_ae_be %>%
mutate(UK = lemmatize_strings(tpfuns::stand_chars(stri_enc_toutf8(UK)))) %>%
mutate(US = lemmatize_strings(tpfuns::stand_chars(stri_enc_toutf8(US)))) %>%
distinct(UK, .keep_all = TRUE) %>%
mutate(regex = paste0("\\b", UK, "\\b"))
e.be <- tpfuns::table_stand_ae_be
ae.be <- tpfuns::table_stand_ae_be
ae.be <- tpfuns::table_stand_ae_be %>%
mutate(UK = lemmatize_strings(tpfuns::stand_chars(stri_enc_toutf8(UK)))) %>%
mutate(US = lemmatize_strings(tpfuns::stand_chars(stri_enc_toutf8(US))))
`%>%` <- magrittr::`%>%`
ae.be <- tpfuns::table_stand_ae_be %>%
dplyr::mutate(UK = textstem::lemmatize_strings(tpfuns::stand_chars(stringi::stri_enc_toutf8(UK)))) %>%
dplyr::mutate(US = textstem::lemmatize_strings(tpfuns::stand_chars(stringi::stri_enc_toutf8(US)))) %>%
dplyr::distinct(UK, .keep_all = TRUE) %>%
dplyr::mutate(regex = paste0("\\b", UK, "\\b"))
View(ae.be)
View(ae.be)
devtools::load_all(".")
library(tpfuns)
`%>%` <- magrittr::`%>%`
ae.be <- tpfuns::table_stand_ae_be %>%
dplyr::mutate(UK = textstem::lemmatize_strings(tpfuns::stand_chars(stringi::stri_enc_toutf8(UK)))) %>%
dplyr::mutate(US = textstem::lemmatize_strings(tpfuns::stand_chars(stringi::stri_enc_toutf8(US)))) %>%
dplyr::distinct(UK, .keep_all = TRUE) %>%
dplyr::mutate(regex = paste0("\\b", UK, "\\b"))
`%>%` <- magrittr::`%>%`
ae.be <- tpfuns::table_stand_ae_be %>%
dplyr::mutate(UK = textstem::lemmatize_words(tpfuns::stand_chars(stringi::stri_enc_toutf8(UK)))) %>%
dplyr::mutate(US = textstem::lemmatize_words(tpfuns::stand_chars(stringi::stri_enc_toutf8(US)))) %>%
dplyr::distinct(UK, .keep_all = TRUE) %>%
dplyr::mutate(regex = paste0("\\b", UK, "\\b"))
`%>%` <- magrittr::`%>%`
ae.be <- tpfuns::table_stand_ae_be %>%
dplyr::mutate(UK = textstem::lemmatize_words(tpfuns::stand_chars(stringi::stri_enc_toutf8(UK)))) %>%
dplyr::mutate(US = textstem::lemmatize_words(tpfuns::stand_chars(stringi::stri_enc_toutf8(US)))) %>%
dplyr::distinct(UK, .keep_all = TRUE) %>%
dplyr::mutate(regex = paste0("\\b", UK, "\\b"))
uk <- ae.be$UK
us <- ae.be$US
devtools::load_all(".")
library(tpfuns)
devtools::load_all(".")
library(tpfuns)
devtools::load_all(".")
library(tpfuns)
